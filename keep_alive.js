import express from 'express';
import fs from 'fs/promises';
import fetch from 'node-fetch';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö/–±–∏—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanText(str) {
  return String(str || '')
    .replace(/[\u200B-\u200D\uFEFF]/g, '') // zero-width –∏ BOM
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∏—Å–µ–ª: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã 0-9
function cleanNumber(str) {
  return String(str || '')
    .replace(/[^\d]/g, '') // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    .replace(/^0+/, '')    // —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    || '0';
}

export function keepAlive() {
  const app = express();
  const PORT = process.env.PORT || 3000;

  // --- —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞ ---
  app.get('/ping', (req, res) => {
    res.send('pong');
  });

  // --- –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á ---
  app.get('/', async (req, res) => {
    try {
      const data = await fs.readFile('./tasks.json', 'utf-8');
      let tasks = JSON.parse(data);

      // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –≤–∏–¥—É —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
      tasks = tasks.map(task => ({
        time: cleanText(task.time),
        text: cleanText(task.text.replace(/\[id\d+\|([^\]]+)\]/g, '$1')),
        times: cleanNumber(task.times),
        peerId: cleanNumber(task.peerId),
        sent: Boolean(task.sent)
      }));

      // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
      let html = `
        <html>
          <head>
            <title>–ó–∞–¥–∞—á–∏ –±–æ—Ç–∞</title>
            <meta charset="utf-8">
            <style>
              body { font-family: sans-serif; padding: 20px; background: #f9f9f9; }
              h1 { color: #333; }
              table { border-collapse: collapse; width: 100%; background: #fff; }
              th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
              th { background-color: #f4f4f4; }
              tr:nth-child(even) { background-color: #fdfdfd; }
              tr:hover { background-color: #f1f7ff; }
              .sent { color: green; font-weight: bold; }
              .not-sent { color: red; font-weight: bold; }
            </style>
            <script>
              setTimeout(() => { location.reload(); }, 5000);
            </script>
          </head>
          <body>
            <h1>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±–æ—Ç–∞</h1>
            <table>
              <tr>
                <th>#</th>
                <th>–í—Ä–µ–º—è (–ú–°–ö)</th>
                <th>–¢–µ–∫—Å—Ç</th>
                <th>–ü–æ–≤—Ç–æ—Ä–æ–≤</th>
                <th>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                <th>–ö—Ç–æ —Å–æ–∑–¥–∞–ª</th>
              </tr>
      `;

      tasks.forEach((task, index) => {
        html += `
          <tr>
            <td>${index + 1}</td>
            <td>${task.time}</td>
            <td>${task.text}</td>
            <td>${task.times}</td>
            <td class="${task.sent ? 'sent' : 'not-sent'}">${task.sent ? '‚úÖ' : '‚ùå'}</td>
            <td>${task.peerId}</td>
          </tr>
        `;
      });

      html += `
            </table>
          </body>
        </html>
      `;

      res.send(html);
    } catch (err) {
      console.error(err);
      res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ' + err.message);
    }
  });

  app.listen(PORT, () => {
    console.log(`‚úÖ Keep-alive server running on port ${PORT}`);
  });

  // --- –∫–æ—Å—Ç—ã–ª—å: self-ping –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã ---
  setInterval(() => {
    fetch(`http://localhost:${PORT}/ping`)
      .then(() => console.log('üîÑ Self-ping OK'))
      .catch(err => console.error('‚ùå Self-ping failed:', err.message));
  }, 4 * 60 * 1000);
}
