import { VK } from "vk-io";
import fs from "fs/promises";
import express from "express";
import fetch from "node-fetch";

// ====================
// ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
// ====================
const TASKS_FILE = "./tasks.json";    // –§–∞–π–ª –∑–∞–¥–∞—á
const USERS_FILE = "./users.json";    // –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∞—Ä–Ω—ã, –±–∞–Ω—ã)
const LOG_FILE = "./logs.txt";        // –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
const GROUP_FILE = "./group.json";    // –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
const TIMEZONE_OFFSET = 3;            // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ú–°–ö)
const PORT = process.env.PORT || 8080; // –ü–æ—Ä—Ç Express —Å–µ—Ä–≤–µ—Ä–∞

// ====================
// ====== Express ======
// ====================
const app = express();
app.use(express.json());

// Keep-alive ping
app.get("/ping", (req, res) => res.send("pong"));

// –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
app.get("/", async (req, res) => {
  try {
    const data = await fs.readFile(TASKS_FILE, "utf-8");
    const tasks = JSON.parse(data);
    let html = `
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ó–∞–¥–∞—á–∏ –±–æ—Ç–∞</title>
      <style>
        body { font-family: sans-serif; background:#f9f9f9; padding:20px;}
        table { border-collapse: collapse; width:100%; background:#fff;}
        th, td { border:1px solid #ccc; padding:8px; text-align:left;}
        th { background:#f4f4f4;}
        tr:nth-child(even){background:#fdfdfd;}
        tr:hover{background:#f1f7ff;}
        .sent{color:green;font-weight:bold;}
        .not-sent{color:red;font-weight:bold;}
      </style>
      <script>setTimeout(()=>{location.reload();},5000);</script>
    </head>
    <body>
      <h1>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h1>
      <table>
        <tr><th>#</th><th>–í—Ä–µ–º—è</th><th>–¢–µ–∫—Å—Ç</th><th>–ü–æ–≤—Ç–æ—Ä–æ–≤</th><th>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</th><th>–ö—Ç–æ —Å–æ–∑–¥–∞–ª</th></tr>
    `;
    tasks.forEach((t,i)=>{
      html+=`<tr>
      <td>${i+1}</td>
      <td>${t.time}</td>
      <td>${t.text.replace(/\[id\d+\|([^\]]+)\]/g,"$1")}</td>
      <td>${t.times}</td>
      <td class="${t.sent?"sent":"not-sent"}">${t.sent?"‚úÖ":"‚ùå"}</td>
      <td>${t.peerId}</td>
      </tr>`;
    });
    html+="</table></body></html>";
    res.send(html);
  } catch(err){ res.send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: "+err.message); }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, ()=>console.log(`‚úÖ Server running on port ${PORT}`));

// Self-ping –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã
setInterval(()=>fetch(`http://localhost:${PORT}/ping`).catch(()=>{}),4*60*1000);

// ====================
// ====== –£—Ç–∏–ª–∏—Ç—ã ======
// ====================
function formatTime(date=new Date()){
  const local = new Date(date.getTime() + TIMEZONE_OFFSET*60*60*1000);
  return `${String(local.getUTCHours()).padStart(2,"0")}:${String(local.getUTCMinutes()).padStart(2,"0")}`;
}

function validateTimeString(time){
  const parts = time.split(":");
  if(parts.length!==2) return false;
  const [h,m] = parts.map(x=>parseInt(x,10));
  return !isNaN(h) && !isNaN(m) && h>=0 && h<=23 && m>=0 && m<=59;
}

function createTask(peerId,time,text,times){ 
  return {peerId,time,text,times,sent:false,createdAt:new Date().toISOString()};
}

// ====================
// ====== –§–∞–π–ª—ã ======
// ====================
async function loadJSON(file){ try{return JSON.parse(await fs.readFile(file,"utf-8"))}catch{return null;} }
async function saveJSON(file,data){ await fs.writeFile(file,JSON.stringify(data,null,2),"utf-8"); }

// ====================
// ====== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ======
// ====================
let tasks = [];              // –ó–∞–¥–∞—á–∏
let users = {};              // –í–∞—Ä–Ω—ã –∏ –±–∞–Ω—ã
let isStarted = false;       // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
let groupPeerId = null;      // –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
let saperGames = {};         // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–ø—ë—Ä–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
(async()=>{
  tasks = await loadJSON(TASKS_FILE) || [];
  users = await loadJSON(USERS_FILE) || {};
  const g = await loadJSON(GROUP_FILE);
  if(g?.groupPeerId){ isStarted=true; groupPeerId=g.groupPeerId; }
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);
})();

// ====================
// ====== VK API ======
// ====================
const vk = new VK({ token: "vk1.a.F3Zjpr-ACP9y4IGgB718zAUCTQUci4jeRkw04gctIKdOSD_406C7BJh7w1qzKGT6junxgDnni3yg2prsgXr_ANuVnWwOwNikTg3fEyRLYnFt-85i62uEw8mWxLLOfQpyOH3x5hmW8imKVIeWl1cJWOGW7LmlsJoSXQRJuMKLUsh8kQObgJc1asHNhrtscv7w3s53UzCk0PWr19jz2j42yQ", apiVersion:"5.199" });
const { updates } = vk;

// ====================
// ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
// ====================
async function logMessage(context){
  const line = `[${formatTime()}] ID:${context.senderId} Peer:${context.peerId} Text:"${context.text}"\n`;
  await fs.appendFile(LOG_FILE,line);
}

// ====================
// ====== –í–∞—Ä–Ω—ã/–ë–∞–Ω—ã ======
// ====================
function checkBan(id){ return users[id]?.bannedUntil && Date.now()<users[id].bannedUntil; }

function addWarn(id){
  if(!users[id]) users[id]={warns:0,bannedUntil:null};
  users[id].warns += 1;
  if(users[id].warns>=3){
    users[id].bannedUntil = Date.now()+60*60*1000; // 1 —á–∞—Å –±–∞–Ω
    users[id].warns = 0;
    return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 —á–∞—Å";
  }
  return `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ${users[id].warns}`;
}

// ====================
// ====== –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
async function kickUserInChat(peerId,userId){
  if(peerId<2000000000) return "‚ùå –≠—Ç–æ –Ω–µ —á–∞—Ç, –∫–∏–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω";
  const chatId = peerId - 2000000000;
  try{
    await vk.api.messages.removeChatUser({chat_id:chatId, member_id:userId});
    return "üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç";
  }catch(err){ return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å: "+err.message; }
}

// ====================
// ====== –°–∞–ø—ë—Ä ======
function generateSaperBoard(size=6,mines=8){
  const board=Array(size).fill(0).map(()=>Array(size).fill(0));
  let placed=0;
  while(placed<mines){
    const x=Math.floor(Math.random()*size);
    const y=Math.floor(Math.random()*size);
    if(board[x][y]===0){ board[x][y]="üí£"; placed++; }
  }
  return board;
}

function renderSaperButtons(board){
  return board.map((row,x)=>row.map((cell,y)=>{
    return { text:"‚¨ú", payload:`saper_${x}_${y}`, color:"secondary" };
  }));
}

// ====================
// ====== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ======
async function sendMessage(peerId,text,keyboard=null){
  try{
    await vk.api.messages.send({peer_id:peerId,message:text,random_id:Math.floor(Math.random()*1e9),keyboard});
  }catch(err){ console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`); }
}

// ====================
// ====== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ======
setInterval(async()=>{
  const cur=formatTime(); let changed=false;
  for(let i=tasks.length-1;i>=0;i--){
    const t=tasks[i];
    if(validateTimeString(t.time) && t.time===cur && !t.sent){
      for(let j=0;j<t.times;j++) await sendMessage(t.peerId,t.text);
      t.sent = true; tasks.splice(i,1); changed=true;
    }
  }
  if(changed) await saveJSON(TASKS_FILE,tasks);
},5000);

// ====================
// ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ======
updates.on("message_new", async(context)=>{
  const peerId=context.peerId;
  const text=context.text?.trim();
  const senderId=context.senderId;
  if(!text) return;

  await logMessage(context);

  // –ü–æ–∫–∞ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∂–¥—ë–º /–Ω–∞—á–∞—Ç—å
  if(!isStarted){
    if(text==="/–Ω–∞—á–∞—Ç—å"){
      isStarted=true;
      groupPeerId=peerId;
      await saveJSON(GROUP_FILE,{groupPeerId});
      return context.send("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã");
    }
    return;
  }

  if(peerId!==groupPeerId) return;  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã
  if(checkBan(senderId)) return;

  // ========= –ö–æ–º–∞–Ω–¥—ã =========
  if(text.startsWith("!bind")){
    if(context.isChat){
      const members = await vk.api.messages.getConversationMembers({peer_id:peerId});
      const member = members.items.find(m=>m.member_id===senderId);
      if(!member?.is_admin) return context.send("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç !bind");
    }
    const parts=text.split(" ");
    if(parts.length<3) return context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !bind HH:MM —Ç–µ–∫—Å—Ç [–ø–æ–≤—Ç–æ—Ä—ã]");
    let time=parts[1];
    if(!validateTimeString(time)) return context.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    let repeatCount=1;
    let msgText="";
    if(!isNaN(parts[parts.length-1])){ repeatCount=parseInt(parts[parts.length-1]); msgText=parts.slice(2,-1).join(" "); } 
    else msgText=parts.slice(2).join(" ");
    if(!msgText) return context.send("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç");
    tasks.push(createTask(peerId,time,msgText,repeatCount));
    await saveJSON(TASKS_FILE,tasks);
    return context.send(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüïí ${time}\nüí¨ "${msgText}"\nüîÅ ${repeatCount} —Ä–∞–∑`);
  }

  if(text==="!tasks"){ 
    if(tasks.length===0) return context.send("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á"); 
    let list="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"; tasks.forEach((t,i)=>{ list+=`${i+1}. [${t.time}] "${t.text}" √ó${t.times}\n`; }); 
    return context.send(list); 
  }

  if(text.startsWith("!deltask")){
    const idx=parseInt(text.split(" ")[1])-1; if(isNaN(idx)||idx<0||idx>=tasks.length) return context.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä");
    const removed=tasks.splice(idx,1); await saveJSON(TASKS_FILE,tasks); return context.send(`üóë –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${removed[0].text}"`);
  }

  if(text.startsWith("!warn")){
    const target=parseInt(text.split(" ")[1]); if(!target) return context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !warn ID");
    const msg=addWarn(target); await saveJSON(USERS_FILE,users); return context.send(msg);
  }

  if(text.startsWith("!kick")){
    const target=parseInt(text.split(" ")[1]); if(!target) return context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !kick ID");
    const msg=await kickUserInChat(peerId,target); return context.send(msg);
  }

  if(text==="!saper"){
    const board = generateSaperBoard();
    saperGames[senderId] = board;
    const keyboard = { buttons: renderSaperButtons(board) };
    return context.send("üïπ –°–∞–ø—ë—Ä! –ù–∞–∂–∏–º–∞–π –Ω–∞ –ø–ª–∏—Ç–∫–∏:",keyboard);
  }

  // ========= –ö–Ω–æ–ø–∫–∏ –°–∞–ø—ë—Ä–∞ =========
  let payloadStr = null;
  if(context.payload){
    if(typeof context.payload==="string") payloadStr = context.payload;
    else if(typeof context.payload==="object" && context.payload.payload) payloadStr = context.payload.payload;
  }

  if(payloadStr?.startsWith("saper_")){
    const parts = payloadStr.split("_");
    const x = parseInt(parts[1]);
    const y = parseInt(parts[2]);
    const board = saperGames[senderId];
    if(!board) return context.send("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏ !saper");
    if(board[x][y]==="üí£"){ delete saperGames[senderId]; return context.send("üí• –ë—É–º! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"); }
    board[x][y]="‚úÖ"; // –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    const keyboard = { buttons: renderSaperButtons(board) };
    return context.send("üü© –û—Ç–∫—Ä—ã—Ç–æ!",keyboard);
  }

  if(text==="!help"){
    return context.send(`
üìú –ö–æ–º–∞–Ω–¥—ã:
/–Ω–∞—á–∞—Ç—å - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
!bind HH:MM —Ç–µ–∫—Å—Ç [–ø–æ–≤—Ç–æ—Ä—ã] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
!tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
!deltask N - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
!warn ID - –≤–∞—Ä–Ω
!kick ID - –∫–∏–∫
!saper - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞–ø—ë—Ä
!help - –ø–æ–º–æ—â—å
`);
  }
});

// ====================
// ====== –ó–∞–ø—É—Å–∫ ======
(async()=>{ console.log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"); await updates.start(); })();
