// index.js
// ============================================================================
// VK bot —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π: –º–∏–≥—Ä–∞—Ü–∏–∏, —Ä–æ–ª–∏, –±–∞–Ω—ã/–∫–∏–∫–∏, –∑–∞–¥–∞—á–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
// ============================================================================
//
// –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: node >= 18, –ø–∞–∫–µ—Ç—ã:
//   npm i vk-io pg dotenv node-fetch fs
//
// ENV:
//   DATABASE_URL - —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Postgres
//   VK_TOKEN     - —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK
//
// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ index.js –∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ.
//
// ============================================================================

// === –ò–º–ø–æ—Ä—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
import { VK } from "vk-io";
import fs from "fs/promises";
import express from "express";
import fetch from "node-fetch";
import { Pool } from "pg";
import dotenv from "dotenv";

dotenv.config();

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
const TASKS_FILE = "./tasks.json";
const LOG_FILE = "./logs.txt";
const TIMEZONE_OFFSET = 3; // UTC+3
const PORT = process.env.PORT || 3000;
const DB_URL = process.env.DATABASE_URL;
const VK_TOKEN = process.env.VK_TOKEN;

// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è env
if (!DB_URL) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL");
  process.exit(1);
}
if (!VK_TOKEN) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è VK_TOKEN");
  process.exit(1);
}

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
const pool = new Pool({
  connectionString: DB_URL,
  ssl: { rejectUnauthorized: false },
});

// === VK API setup ===
const vk = new VK({
  token: VK_TOKEN,
  apiVersion: "5.199",
});
const { updates } = vk;

// === Express keep-alive (–¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ç–∏–ø–∞ Railway/Heroku) ===
const app = express();
app.get("/ping", (req, res) => res.send("pong"));
app.listen(PORT, () => {
  console.log(`‚úÖ Keep-alive server running on port ${PORT}`);
});
setInterval(() => {
  fetch(`http://localhost:${PORT}/ping`)
    .then(() => console.log("üîÑ Self-ping OK"))
    .catch((err) => console.error("‚ùå Self-ping failed:", err.message));
}, 4 * 60 * 1000);

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ –í–†–ï–ú–ï–ù–ò, –§–ê–ô–õ–û–í, –õ–û–ì–ê
// ============================================================================
function nowISO() {
  return new Date().toISOString();
}

function formatTime(date = new Date()) {
  const localDate = new Date(date.getTime() + TIMEZONE_OFFSET * 60 * 60 * 1000);
  const hh = localDate.getUTCHours().toString().padStart(2, "0");
  const mm = localDate.getUTCMinutes().toString().padStart(2, "0");
  return `${hh}:${mm}`;
}

function validateTimeString(time) {
  if (typeof time !== "string") return false;
  const parts = time.split(":");
  if (parts.length !== 2) return false;
  const [h, m] = parts.map((x) => parseInt(x, 10));
  return !isNaN(h) && !isNaN(m) && h >= 0 && h <= 23 && m >= 0 && m <= 59;
}

async function appendLog(line) {
  try {
    await fs.appendFile(LOG_FILE, `[${nowISO()}] ${line}\n`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", err.message);
  }
}

// ============================================================================
// –§–ê–ô–õ-–°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–î–ê–ß
// ============================================================================
async function saveTasks(tasks) {
  try {
    await fs.writeFile(TASKS_FILE, JSON.stringify(tasks, null, 2), "utf-8");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è tasks.json:", err.message);
  }
}

async function loadTasks() {
  try {
    const data = await fs.readFile(TASKS_FILE, "utf-8");
    const parsed = JSON.parse(data);
    if (Array.isArray(parsed)) return parsed;
    console.error("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç tasks.json –Ω–µ–≤–µ—Ä–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞—é.");
    return [];
  } catch (err) {
    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å tasks.json, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π:", err.message);
    await saveTasks([]);
    return [];
  }
}

function createTask(peerId, time, text, times) {
  return {
    id: `${Date.now()}-${Math.random().toString(36).slice(2, 8)}`,
    peerId,
    time,
    text,
    times,
    sent: false,
    createdAt: nowISO(),
  };
}

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ú–ò–ì–†–ê–¶–ò–ò –ë–î
// ============================================================================

/**
 * –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü –∏ –∞–≤—Ç–æ-–º–∏–≥—Ä–∞—Ü–∏–∏.
 * –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã ‚Äî —Å–æ–∑–¥–∞—ë–º. –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º.
 */
async function initDBAndMigrate() {
  try {
    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É groups (—á–∞—Ç—ã)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS groups (
        chat_id BIGINT PRIMARY KEY,
        title TEXT,
        members_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É users, —Å –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º–æ–π (chat_id NOT NULL DEFAULT 0).
    // –ï—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç.
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT NOT NULL,
        chat_id BIGINT NOT NULL DEFAULT 0,
        warns INT DEFAULT 0,
        banned BOOLEAN DEFAULT FALSE,
        global BOOLEAN DEFAULT FALSE,
        role TEXT DEFAULT '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        created_at TIMESTAMP DEFAULT NOW(),
        PRIMARY KEY (user_id, chat_id)
      )
    `);

    // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É bans/–ª–æ–≥ –±–∞–Ω–æ–≤ –∏ –∫–∏–∫–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bans (
        id BIGSERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        chat_id BIGINT NOT NULL DEFAULT 0,
        action TEXT NOT NULL, -- 'ban' | 'kick'
        reason TEXT,
        actor_id BIGINT, -- –∫—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–ª
        created_at TIMESTAMP DEFAULT NOW(),
        global BOOLEAN DEFAULT FALSE
      )
    `);

    // --- –ú–ò–ì–†–ê–¶–ò–ò: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ ---
    // add column IF NOT EXISTS ‚Äî Postgres –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç IF NOT EXISTS –¥–ª—è ADD COLUMN
    await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS role TEXT DEFAULT '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'`);
    await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS global BOOLEAN DEFAULT FALSE`);
    await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS warns INT DEFAULT 0`);
    await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS banned BOOLEAN DEFAULT FALSE`);
    await pool.query(`ALTER TABLE users ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()`);

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç NULL –≤ chat_id (–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    await pool.query(`UPDATE users SET chat_id = 0 WHERE chat_id IS NULL`);

    console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î:", err);
    process.exit(1);
  }
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ –†–ê–ë–û–¢–´ –° DB: USERS / GROUPS / BANS
// ============================================================================

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç peerId VK –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π chatId (–¥–ª—è –±–µ—Å–µ–¥ peerId = 2000000000 + chat_id)
 * –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º chat_id —á–∏—Å–ª–æ–º (0 –¥–ª—è –õ–°),
 * –Ω–æ –≤ —Å—Ö–µ–º–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id = 0 –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π/–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
 */
function peerToChatId(peerId) {
  if (typeof peerId !== "number") return 0;
  // –í VK –±–µ—Å–µ–¥—ã: peer_id = 2000000000 + chat_id
  if (peerId > 2000000000) return peerId - 2000000000;
  // –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—Ñ–∏–ª—å) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º 0 (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)
  return 0;
}

/**
 * Ensure user exists in users table, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º.
 * –ï—Å–ª–∏ —Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–æ–ª—å –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
 */
async function ensureUser(userId, chatId = 0, role = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") {
  try {
    await pool.query(
      `INSERT INTO users (user_id, chat_id, role, global)
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (user_id, chat_id) DO UPDATE
       SET role = COALESCE(users.role, EXCLUDED.role)`,
      [userId, chatId || 0, role, chatId === 0]
    );
  } catch (err) {
    console.error("‚ùå ensureUser error:", err.message);
    await appendLog(`ensureUser error: ${err.message}`);
  }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–Ω (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ)
 */
async function addWarn(userId, chatId = 0, global = false) {
  const keyChat = global ? 0 : chatId || 0;
  try {
    await pool.query(
      `INSERT INTO users (user_id, chat_id, warns, global)
       VALUES ($1, $2, 1, $3)
       ON CONFLICT (user_id, chat_id)
       DO UPDATE SET warns = users.warns + 1`,
      [userId, keyChat, global]
    );
  } catch (err) {
    console.error("‚ùå addWarn error:", err.message);
    await appendLog(`addWarn error: ${err.message}`);
  }
}

/**
 * –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω –∏ –ª–æ–≥ –±–∞–Ω–æ–≤
 */
async function banUser(userId, chatId = 0, actorId = null, reason = null, global = false) {
  const keyChat = global ? 0 : chatId || 0;
  try {
    // Update users record
    await pool.query(
      `INSERT INTO users (user_id, chat_id, banned, global)
       VALUES ($1, $2, TRUE, $3)
       ON CONFLICT (user_id, chat_id)
       DO UPDATE SET banned = TRUE, global = $3`,
      [userId, keyChat, global]
    );

    // Add to bans log
    await pool.query(
      `INSERT INTO bans (user_id, chat_id, action, reason, actor_id, global)
       VALUES ($1, $2, 'ban', $3, $4, $5)`,
      [userId, keyChat, reason, actorId, global]
    );
  } catch (err) {
    console.error("‚ùå banUser error:", err.message);
    await appendLog(`banUser error: ${err.message}`);
  }
}

async function unbanUser(userId, chatId = 0, actorId = null, global = false) {
  const keyChat = global ? 0 : chatId || 0;
  try {
    await pool.query(`UPDATE users SET banned = FALSE WHERE user_id=$1 AND chat_id=$2`, [userId, keyChat]);
    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ä–∞–∑–±–∞–Ω–∞
    await pool.query(
      `INSERT INTO bans (user_id, chat_id, action, reason, actor_id, global)
       VALUES ($1, $2, 'unban', $3, $4, $5)`,
      [userId, keyChat, null, actorId, global]
    );
  } catch (err) {
    console.error("‚ùå unbanUser error:", err.message);
    await appendLog(`unbanUser error: ${err.message}`);
  }
}

/**
 * –ö–∏–∫: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É bans –∏ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ VK API.
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–∏–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å chat_id = 0.
 */
async function kickUser(userId, chatId = 0, actorId = null, reason = null, global = false) {
  const keyChat = global ? 0 : chatId || 0;
  try {
    await pool.query(
      `INSERT INTO bans (user_id, chat_id, action, reason, actor_id, global)
       VALUES ($1, $2, 'kick', $3, $4, $5)`,
      [userId, keyChat, reason, actorId, global]
    );
  } catch (err) {
    console.error("‚ùå kickUser error:", err.message);
    await appendLog(`kickUser error: ${err.message}`);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ—Å–µ–¥—ã, –µ—Å–ª–∏ –∫–ª—é—á chatId –Ω–µ–Ω—É–ª–µ–≤–æ–π
  if (!global && chatId && chatId > 0) {
    try {
      // –î–ª—è VK API –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç chat_id (–ª–æ–∫–∞–ª—å–Ω—ã–π ID) ‚Äî —É –Ω–∞—Å chatId —É–∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–π
      await vk.api.messages.removeChatUser({ chat_id: chatId, member_id: userId });
      console.log(`‚úÖ –£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ —á–∞—Ç–∞ ${chatId} —á–µ—Ä–µ–∑ VK API`);
    } catch (err) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑ —á–∞—Ç–∞ ${chatId}:`, err.message);
      await appendLog(`VK removeChatUser failed: ${err.message}`);
    }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
 *  - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω chatId ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
 *  - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω userId (–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, chatId) ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getChatStats(chatId) {
  try {
    const membersRes = await pool.query(`SELECT COUNT(*) FROM users WHERE chat_id=$1`, [chatId]);
    const bannedRes = await pool.query(`SELECT COUNT(*) FROM users WHERE chat_id=$1 AND banned=TRUE`, [chatId]);
    const warnsRes = await pool.query(`SELECT SUM(warns) FROM users WHERE chat_id=$1`, [chatId]);

    return {
      members: parseInt(membersRes.rows[0].count, 10) || 0,
      banned: parseInt(bannedRes.rows[0].count, 10) || 0,
      warns: parseInt(warnsRes.rows[0].sum, 10) || 0,
    };
  } catch (err) {
    console.error("‚ùå getChatStats error:", err.message);
    return { members: 0, banned: 0, warns: 0 };
  }
}

async function getUserStats(userId, chatId = null) {
  try {
    const keyChat = chatId || 0;
    const res = await pool.query(`SELECT * FROM users WHERE user_id=$1 AND chat_id=$2`, [userId, keyChat]);
    return res.rows[0] || null;
  } catch (err) {
    console.error("‚ùå getUserStats error:", err.message);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ (role = '–∞–¥–º–∏–Ω')
 */
async function isAdmin(userId, chatId = 0) {
  try {
    const res = await pool.query(`SELECT role FROM users WHERE user_id=$1 AND chat_id=$2`, [userId, chatId]);
    if (res.rowCount === 0) return false;
    const role = res.rows[0].role;
    return role === "–∞–¥–º–∏–Ω";
  } catch (err) {
    console.error("‚ùå isAdmin error:", err.message);
    return false;
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ë–î
 */
async function saveGroup(chatId, title = null, membersCount = 0) {
  try {
    await pool.query(
      `INSERT INTO groups (chat_id, title, members_count)
       VALUES ($1, $2, $3)
       ON CONFLICT (chat_id) DO UPDATE
       SET title = EXCLUDED.title, members_count = EXCLUDED.members_count`,
      [chatId, title, membersCount]
    );
  } catch (err) {
    console.error("‚ùå saveGroup error:", err.message);
    await appendLog(`saveGroup error: ${err.message}`);
  }
}

// ============================================================================
// –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß (tasks.json)
// ============================================================================
let tasks = [];
(async () => {
  tasks = await loadTasks();
  console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);
})();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–∏–ª–∏ —á–∞—â–µ)
setInterval(async () => {
  const currentTime = formatTime();
  let changed = false;
  for (let i = tasks.length - 1; i >= 0; i--) {
    const task = tasks[i];
    if (!validateTimeString(task.time)) {
      tasks.splice(i, 1);
      changed = true;
      continue;
    }
    if (!task.sent && task.time === currentTime) {
      for (let r = 0; r < (task.times || 1); r++) {
        try {
          await vk.api.messages.send({
            peer_id: task.peerId,
            message: task.text,
            random_id: Math.floor(Math.random() * 1e9),
          });
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏:", err.message);
        }
      }
      task.sent = true;
      // —É–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
      tasks.splice(i, 1);
      changed = true;
    }
  }
  if (changed) await saveTasks(tasks);
}, 30 * 1000);

// ============================================================================
// –°–ê–ü–Å–† (UI –∫–Ω–æ–ø–∫–∏) ‚Äî –ø—Ä–∏–º–µ—Ä, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—Ç—å
// ============================================================================
let saperGames = {};

function renderSaperButtons(board) {
  return JSON.stringify({
    one_time: false,
    inline: true,
    buttons: board.map((row, x) =>
      row.map((cell, y) => ({
        action: {
          type: "text",
          label: cell === "üí£" ? "‚¨ú" : cell,
          payload: JSON.stringify({ type: `saper_${x}_${y}` }),
        },
        color: "secondary",
      }))
    ),
  });
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô
// ============================================================================
updates.on("message_new", async (context) => {
  try {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    if (!context.isUser && !context.isChat) return;

    const peerId = context.peerId;
    const senderId = context.senderId;
    const text = (context.text || "").trim();

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await appendLog(`${senderId} -> ${peerId}: ${text}`);

    // –ü—Ä–∏–≤–æ–¥–∏–º peerId –∫ chatId (–ª–æ–∫–∞–ª—å–Ω—ã–π ID –±–µ—Å–µ–¥—ã)
    const localChatId = peerToChatId(peerId); // 0 –∏–ª–∏ >0

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å
    await ensureUser(senderId, localChatId, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");

    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /–Ω–∞—á–∞—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î –∏ –¥–∞—ë–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ —Ç–æ–º—É, –∫—Ç–æ –≤—ã–∑–≤–∞–ª
    if (text === "/–Ω–∞—á–∞—Ç—å" || text.toLowerCase() === "–Ω–∞—á–∞—Ç—å") {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã —á–µ—Ä–µ–∑ VK API (–∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
      let title = null;
      let membersCount = 0;
      try {
        const conv = await vk.api.messages.getConversationsById({ peer_ids: peerId });
        if (conv && conv.count > 0 && conv.items && conv.items[0].chat_settings) {
          title = conv.items[0].chat_settings.title || null;
        }
        const members = await vk.api.messages.getConversationMembers({ peer_id: peerId });
        membersCount = members?.count || 0;
      } catch (e) {
        // –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã —á–µ—Ä–µ–∑ VK API:", e.message);
        await appendLog(`getConversationsById error: ${e.message}`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ groups
      await saveGroup(localChatId, title, membersCount);

      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—ã–∑–≤–∞–≤—à–µ–º—É –∫–æ–º–∞–Ω–¥—É
      try {
        await pool.query(
          `INSERT INTO users (user_id, chat_id, role, global) VALUES ($1, $2, $3, $4)
           ON CONFLICT (user_id, chat_id) DO UPDATE SET role = EXCLUDED.role`,
          [senderId, localChatId, "–∞–¥–º–∏–Ω", false]
        );
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞:", e.message);
        await appendLog(`set admin error: ${e.message}`);
      }

      await context.send("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î. –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
      return;
    }

    // === HELP ===
    if (text === "!help") {
      const helpText = [
        "üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        "/–Ω–∞—á–∞—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç –≤ –±–∞–∑–µ –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–æ–º",
        "!help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "!bind HH:MM —Ç–µ–∫—Å—Ç [–∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
        "!tasks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏",
        "!deltask N ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)",
        "!warn <id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –≤–∞—Ä–Ω (–ª–æ–∫–∞–ª—å–Ω–æ)",
        "!ban <id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –±–∞–Ω (–ª–æ–∫–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        "!kick <id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –∫–∏–∫ (–ª–æ–∫–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        "!awarn <id> ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞—Ä–Ω",
        "!aban <id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–Ω (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        "!akick <id> [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∏–∫ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        "!stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (–≤ —á–∞—Ç–µ) –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –õ–°)",
        "!setrole <id> <–∞–¥–º–∏–Ω|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
        "!saper ‚Äî –º–∏–Ω–∏-–∏–≥—Ä–∞ —Å–∞–ø—ë—Ä",
        "!saper_reset ‚Äî —Å–±—Ä–æ—Å –∏–≥—Ä—ã",
      ].join("\n");
      await context.send(helpText);
      return;
    }

    // === –û–±—Ä–∞–±–æ—Ç–∫–∞ payload (–∫–Ω–æ–ø–∫–∏ —Å–∞–ø—ë—Ä–∞) ===
    let payloadStr = null;
    if (context.payload) {
      if (typeof context.payload === "string") {
        payloadStr = context.payload;
      } else if (typeof context.payload === "object" && context.payload.payload) {
        try {
          const p = JSON.parse(context.payload.payload);
          payloadStr = p.type;
        } catch (e) {
          // ignore
        }
      }
    }
    if (payloadStr?.startsWith("saper_")) {
      const parts = payloadStr.split("_");
      const x = parseInt(parts[1], 10);
      const y = parseInt(parts[2], 10);
      const board = saperGames[senderId];
      if (!board) {
        await context.send("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ !saper");
        return;
      }
      if (board[x][y] === "üí£") {
        delete saperGames[senderId];
        await context.send("üí• –ë–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!");
        return;
      }
      board[x][y] = "‚úÖ";
      await context.send("üü© –û—Ç–∫—Ä—ã—Ç–æ!", renderSaperButtons(board));
      return;
    }

    // === –°–∞–ø—ë—Ä: —Å—Ç–∞—Ä—Ç –∏ —Å–±—Ä–æ—Å ===
    if (text === "!saper") {
      const board = Array.from({ length: 5 }, () =>
        Array.from({ length: 5 }, () => (Math.random() < 0.2 ? "üí£" : "‚¨ú"))
      );
      saperGames[senderId] = board;
      await context.send("üí£ –ò–≥—Ä–∞ ¬´—Å–∞–ø—ë—Ä¬ª! –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏:", renderSaperButtons(board));
      return;
    }
    if (text === "!saper_reset") {
      delete saperGames[senderId];
      await context.send("üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ !saper —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.");
      return;
    }

    // === –ö–æ–º–∞–Ω–¥–∞ setrole: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª—å ===
    if (text.startsWith("!setrole")) {
      const parts = text.split(/\s+/);
      if (parts.length !== 3) {
        await context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !setrole <id> <–∞–¥–º–∏–Ω|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>");
        return;
      }
      const targetId = parseInt(parts[1], 10);
      const role = parts[2].toLowerCase();
      if (!["–∞–¥–º–∏–Ω", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"].includes(role)) {
        await context.send("‚ùå –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å '–∞–¥–º–∏–Ω' –∏–ª–∏ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'");
        return;
      }
      const allowed = await isAdmin(senderId, localChatId);
      if (!allowed) {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏");
        return;
      }
      try {
        await pool.query(
          `INSERT INTO users (user_id, chat_id, role) VALUES ($1, $2, $3)
           ON CONFLICT (user_id, chat_id) DO UPDATE SET role = EXCLUDED.role`,
          [targetId, localChatId, role]
        );
        await context.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å ${role}`);
      } catch (e) {
        console.error("‚ùå setrole error:", e.message);
        await context.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏");
      }
      return;
    }

    // === WARN / BAN / KICK –ª–æ–∫–∞–ª—å–Ω—ã–µ ===
    // !warn <id> [reason]
    if (text.startsWith("!warn")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      const reason = parts.slice(2).join(" ") || null;
      await addWarn(uid, localChatId, false);
      await context.send(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –ø–æ–ª—É—á–∏–ª –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∞—Ä–Ω${reason ? `: ${reason}` : ""}`);
      return;
    }

    // !ban <id> [reason]
    if (text.startsWith("!ban")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      const reason = parts.slice(2).join(" ") || null;
      const allowed = await isAdmin(senderId, localChatId);
      if (!allowed) {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å");
        return;
      }
      await banUser(uid, localChatId, senderId, reason, false);

      // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ—Å–µ–¥—ã
      if (localChatId > 0) {
        try {
          await vk.api.messages.removeChatUser({ chat_id: localChatId, member_id: uid });
        } catch (e) {
          console.warn("‚ö†Ô∏è removeChatUser failed:", e.message);
          await appendLog(`removeChatUser failed: ${e.message}`);
        }
      }

      await context.send(`‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞–±–∞–Ω–µ–Ω${reason ? `: ${reason}` : ""}`);
      return;
    }

    // !kick <id> [reason]
    if (text.startsWith("!kick")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      const reason = parts.slice(2).join(" ") || null;
      const allowed = await isAdmin(senderId, localChatId);
      if (!allowed) {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å");
        return;
      }
      await kickUser(uid, localChatId, senderId, reason, false);
      await context.send(`üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –∫–∏–∫–Ω—É—Ç${reason ? `: ${reason}` : ""}`);
      return;
    }

    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: awarn, aban, akick ===
    if (text.startsWith("!awarn")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      await addWarn(uid, 0, true);
      await context.send(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –ø–æ–ª—É—á–∏–ª –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–∞—Ä–Ω`);
      return;
    }

    if (text.startsWith("!aban")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      const reason = parts.slice(2).join(" ") || null;
      const allowed = await isAdmin(senderId, localChatId);
      if (!allowed) {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∞–Ω—ã");
        return;
      }
      await banUser(uid, 0, senderId, reason, true);
      await context.send(`‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–±–∞–Ω–µ–Ω${reason ? `: ${reason}` : ""}`);
      return;
    }

    if (text.startsWith("!akick")) {
      const parts = text.split(/\s+/);
      const uid = parseInt(parts[1], 10) || senderId;
      const reason = parts.slice(2).join(" ") || null;
      const allowed = await isAdmin(senderId, localChatId);
      if (!allowed) {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–∏–∫–∏");
        return;
      }
      await kickUser(uid, 0, senderId, reason, true);
      await context.send(`üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${uid} –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∏–∫–Ω—É—Ç${reason ? `: ${reason}` : ""}`);
      return;
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    if (text === "!stats") {
      if (context.isChat) {
        // –í —á–∞—Ç–µ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
        const stats = await getChatStats(localChatId);
        await context.send(
          `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${stats.members}\n‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: ${stats.banned}\n‚ö†Ô∏è –í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤: ${stats.warns}`
        );
      } else {
        // –í –ª–∏—á–∫–µ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRec = await getUserStats(senderId, 0);
        if (!userRec) {
          await context.send("üì≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ");
        } else {
          await context.send(
            `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë§ ID: ${userRec.user_id}\n‚ö†Ô∏è –í–∞—Ä–Ω—ã: ${userRec.warns}\n‚õî –ë–∞–Ω: ${userRec.banned ? "–î–∞" : "–ù–µ—Ç"}\n–†–æ–ª—å: ${userRec.role}`
          );
        }
      }
      return;
    }

    // === –ó–ê–î–ê–ß–ò: !bind / !tasks / !deltask ===
    if (text.startsWith("!bind")) {
      const user = await getUserStats(senderId, localChatId);
      if (!user || user.role !== "–∞–¥–º–∏–Ω") {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã (–∞–¥–º–∏–Ω—ã) –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏");
        return;
      }
      const parts = text.split(" ");
      if (parts.length < 3) {
        await context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !bind HH:MM —Ç–µ–∫—Å—Ç [–∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤]");
        return;
      }
      const time = parts[1];
      if (!validateTimeString(time)) {
        await context.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)");
        return;
      }
      let repeatCount = 1;
      let msgText = "";
      if (!isNaN(parts[parts.length - 1])) {
        repeatCount = parseInt(parts[parts.length - 1], 10);
        msgText = parts.slice(2, -1).join(" ");
      } else {
        msgText = parts.slice(2).join(" ");
      }
      if (!msgText) {
        await context.send("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        return;
      }
      if (repeatCount < 1) {
        await context.send("‚ùå –ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1");
        return;
      }
      const newTask = createTask(peerId, time, msgText, repeatCount);
      tasks.push(newTask);
      await saveTasks(tasks);
      await context.send(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: [${time}] "${msgText}" √ó${repeatCount}`);
      return;
    }

    if (text === "!tasks") {
      if (!tasks.length) {
        await context.send("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á");
        return;
      }
      let out = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n";
      tasks.forEach((t, i) => {
        out += `${i + 1}. [${t.time}] "${t.text}" √ó${t.times}\n`;
      });
      await context.send(out);
      return;
    }

    if (text.startsWith("!deltask")) {
      const user = await getUserStats(senderId, localChatId);
      if (!user || user.role !== "–∞–¥–º–∏–Ω") {
        await context.send("‚õî –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã (–∞–¥–º–∏–Ω—ã) –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏");
        return;
      }
      const parts = text.split(" ");
      if (parts.length !== 2) {
        await context.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !deltask <–Ω–æ–º–µ—Ä>");
        return;
      }
      const idx = parseInt(parts[1], 10) - 1;
      if (isNaN(idx) || idx < 0 || idx >= tasks.length) {
        await context.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏");
        return;
      }
      const removed = tasks.splice(idx, 1)[0];
      await saveTasks(tasks);
      await context.send(`üóë –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${removed.text}"`);
      return;
    }

    // --- –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º ---
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ updates.on(message_new):", err);
    await appendLog(`message handler error: ${err.message}`);
  }
});

// ============================================================================
// –ó–ê–ü–£–°–ö: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º longpoll
// ============================================================================
(async () => {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...");
    await initDBAndMigrate();
    console.log("üöÄ –ó–∞–ø—É—Å–∫ VK Updates...");
    await updates.start();
    console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è");
  } catch (err) {
    console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
    process.exit(1);
  }
})();

// ============================================================================
// –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
// ============================================================================
